{
  
    
        "post0": {
            "title": "My Blog",
            "content": "1. Introduction . I&#39;ve already chosen house price as my EDA focus in the second project and I performed linear regression method in training the model and predicted the house price. However, the result was not ideal with a R^2 of around 0.6. This time I&#39;m going to use the same dataset and continue my project on finding the model that fit the data better and predicting the house price. . First of all, I import all the packages that I may use in the process. . from sklearn import datasets from sklearn.linear_model import LinearRegression from sklearn.model_selection import train_test_split from sklearn.model_selection import cross_val_score from sklearn.datasets import fetch_california_housing import pandas as pd import matplotlib.pyplot as plt import numpy as np import seaborn as sns . Then I import the data. . from sklearn.datasets import fetch_california_housing . housing=fetch_california_housing() housing . {&#39;data&#39;: array([[ 8.3252 , 41. , 6.98412698, ..., 2.55555556, 37.88 , -122.23 ], [ 8.3014 , 21. , 6.23813708, ..., 2.10984183, 37.86 , -122.22 ], [ 7.2574 , 52. , 8.28813559, ..., 2.80225989, 37.85 , -122.24 ], ..., [ 1.7 , 17. , 5.20554273, ..., 2.3256351 , 39.43 , -121.22 ], [ 1.8672 , 18. , 5.32951289, ..., 2.12320917, 39.43 , -121.32 ], [ 2.3886 , 16. , 5.25471698, ..., 2.61698113, 39.37 , -121.24 ]]), &#39;target&#39;: array([4.526, 3.585, 3.521, ..., 0.923, 0.847, 0.894]), &#39;feature_names&#39;: [&#39;MedInc&#39;, &#39;HouseAge&#39;, &#39;AveRooms&#39;, &#39;AveBedrms&#39;, &#39;Population&#39;, &#39;AveOccup&#39;, &#39;Latitude&#39;, &#39;Longitude&#39;], &#39;DESCR&#39;: &#39;California housing dataset. n nThe original database is available from StatLib n n http://lib.stat.cmu.edu/datasets/ n nThe data contains 20,640 observations on 9 variables. n nThis dataset contains the average house value as target variable nand the following input variables (features): average income, nhousing average age, average rooms, average bedrooms, population, naverage occupation, latitude, and longitude in that order. n nReferences n- n nPace, R. Kelley and Ronald Barry, Sparse Spatial Autoregressions, nStatistics and Probability Letters, 33 (1997) 291-297. n n&#39;} . x =housing.data Housing = pd.DataFrame(housing.data,columns=housing.feature_names) Housing . MedInc HouseAge AveRooms AveBedrms Population AveOccup Latitude Longitude . 0 8.3252 | 41.0 | 6.984127 | 1.023810 | 322.0 | 2.555556 | 37.88 | -122.23 | . 1 8.3014 | 21.0 | 6.238137 | 0.971880 | 2401.0 | 2.109842 | 37.86 | -122.22 | . 2 7.2574 | 52.0 | 8.288136 | 1.073446 | 496.0 | 2.802260 | 37.85 | -122.24 | . 3 5.6431 | 52.0 | 5.817352 | 1.073059 | 558.0 | 2.547945 | 37.85 | -122.25 | . 4 3.8462 | 52.0 | 6.281853 | 1.081081 | 565.0 | 2.181467 | 37.85 | -122.25 | . 5 4.0368 | 52.0 | 4.761658 | 1.103627 | 413.0 | 2.139896 | 37.85 | -122.25 | . 6 3.6591 | 52.0 | 4.931907 | 0.951362 | 1094.0 | 2.128405 | 37.84 | -122.25 | . 7 3.1200 | 52.0 | 4.797527 | 1.061824 | 1157.0 | 1.788253 | 37.84 | -122.25 | . 8 2.0804 | 42.0 | 4.294118 | 1.117647 | 1206.0 | 2.026891 | 37.84 | -122.26 | . 9 3.6912 | 52.0 | 4.970588 | 0.990196 | 1551.0 | 2.172269 | 37.84 | -122.25 | . 10 3.2031 | 52.0 | 5.477612 | 1.079602 | 910.0 | 2.263682 | 37.85 | -122.26 | . 11 3.2705 | 52.0 | 4.772480 | 1.024523 | 1504.0 | 2.049046 | 37.85 | -122.26 | . 12 3.0750 | 52.0 | 5.322650 | 1.012821 | 1098.0 | 2.346154 | 37.85 | -122.26 | . 13 2.6736 | 52.0 | 4.000000 | 1.097701 | 345.0 | 1.982759 | 37.84 | -122.26 | . 14 1.9167 | 52.0 | 4.262903 | 1.009677 | 1212.0 | 1.954839 | 37.85 | -122.26 | . 15 2.1250 | 50.0 | 4.242424 | 1.071970 | 697.0 | 2.640152 | 37.85 | -122.26 | . 16 2.7750 | 52.0 | 5.939577 | 1.048338 | 793.0 | 2.395770 | 37.85 | -122.27 | . 17 2.1202 | 52.0 | 4.052805 | 0.966997 | 648.0 | 2.138614 | 37.85 | -122.27 | . 18 1.9911 | 50.0 | 5.343675 | 1.085919 | 990.0 | 2.362768 | 37.84 | -122.26 | . 19 2.6033 | 52.0 | 5.465455 | 1.083636 | 690.0 | 2.509091 | 37.84 | -122.27 | . 20 1.3578 | 40.0 | 4.524096 | 1.108434 | 409.0 | 2.463855 | 37.85 | -122.27 | . 21 1.7135 | 42.0 | 4.478142 | 1.002732 | 929.0 | 2.538251 | 37.85 | -122.27 | . 22 1.7250 | 52.0 | 5.096234 | 1.131799 | 1015.0 | 2.123431 | 37.84 | -122.27 | . 23 2.1806 | 52.0 | 5.193846 | 1.036923 | 853.0 | 2.624615 | 37.84 | -122.27 | . 24 2.6000 | 52.0 | 5.270142 | 1.035545 | 1006.0 | 2.383886 | 37.84 | -122.27 | . 25 2.4038 | 41.0 | 4.495798 | 1.033613 | 317.0 | 2.663866 | 37.85 | -122.28 | . 26 2.4597 | 49.0 | 4.728033 | 1.020921 | 607.0 | 2.539749 | 37.85 | -122.28 | . 27 1.8080 | 52.0 | 4.780856 | 1.060453 | 1102.0 | 2.775819 | 37.85 | -122.28 | . 28 1.6424 | 50.0 | 4.401691 | 1.040169 | 1131.0 | 2.391121 | 37.84 | -122.28 | . 29 1.6875 | 52.0 | 4.703226 | 1.032258 | 395.0 | 2.548387 | 37.84 | -122.28 | . ... ... | ... | ... | ... | ... | ... | ... | ... | . 20610 1.3631 | 28.0 | 4.851936 | 1.102506 | 1195.0 | 2.722096 | 39.10 | -121.56 | . 20611 1.2857 | 27.0 | 4.359413 | 1.078240 | 1163.0 | 2.843521 | 39.10 | -121.55 | . 20612 1.4934 | 26.0 | 5.157303 | 1.082397 | 761.0 | 2.850187 | 39.08 | -121.56 | . 20613 1.4958 | 31.0 | 4.500000 | 0.950521 | 1167.0 | 3.039062 | 39.09 | -121.55 | . 20614 2.4695 | 26.0 | 4.801688 | 0.970464 | 1455.0 | 3.069620 | 39.08 | -121.54 | . 20615 2.3598 | 23.0 | 5.461929 | 1.096447 | 724.0 | 3.675127 | 39.08 | -121.54 | . 20616 2.0469 | 15.0 | 4.826667 | 1.176000 | 1157.0 | 3.085333 | 39.08 | -121.53 | . 20617 3.3021 | 20.0 | 4.921053 | 0.956140 | 308.0 | 2.701754 | 39.06 | -121.53 | . 20618 2.2500 | 25.0 | 5.893805 | 1.092920 | 726.0 | 3.212389 | 39.06 | -121.55 | . 20619 2.7303 | 22.0 | 6.388514 | 1.148649 | 1023.0 | 3.456081 | 39.01 | -121.56 | . 20620 4.5625 | 40.0 | 4.125000 | 0.854167 | 151.0 | 3.145833 | 39.05 | -121.48 | . 20621 2.3661 | 37.0 | 7.923567 | 1.573248 | 484.0 | 3.082803 | 39.01 | -121.47 | . 20622 2.4167 | 20.0 | 4.808917 | 0.936306 | 457.0 | 2.910828 | 39.00 | -121.44 | . 20623 2.8235 | 32.0 | 5.101322 | 1.074890 | 598.0 | 2.634361 | 39.03 | -121.37 | . 20624 3.0739 | 16.0 | 5.835052 | 1.030928 | 731.0 | 2.512027 | 39.04 | -121.41 | . 20625 4.1250 | 37.0 | 7.285714 | 1.214286 | 29.0 | 2.071429 | 39.12 | -121.52 | . 20626 2.1667 | 36.0 | 6.573099 | 1.076023 | 504.0 | 2.947368 | 39.18 | -121.43 | . 20627 3.0000 | 5.0 | 6.067797 | 1.101695 | 169.0 | 2.864407 | 39.13 | -121.32 | . 20628 2.5952 | 19.0 | 5.238462 | 1.079487 | 1018.0 | 2.610256 | 39.10 | -121.48 | . 20629 2.0943 | 28.0 | 5.519802 | 1.020902 | 6912.0 | 3.801980 | 39.12 | -121.39 | . 20630 3.5673 | 11.0 | 5.932584 | 1.134831 | 1257.0 | 2.824719 | 39.29 | -121.32 | . 20631 3.5179 | 15.0 | 6.145833 | 1.141204 | 1200.0 | 2.777778 | 39.33 | -121.40 | . 20632 3.1250 | 15.0 | 6.023377 | 1.080519 | 1047.0 | 2.719481 | 39.26 | -121.45 | . 20633 2.5495 | 27.0 | 5.445026 | 1.078534 | 1082.0 | 2.832461 | 39.19 | -121.53 | . 20634 3.7125 | 28.0 | 6.779070 | 1.148256 | 1041.0 | 3.026163 | 39.27 | -121.56 | . 20635 1.5603 | 25.0 | 5.045455 | 1.133333 | 845.0 | 2.560606 | 39.48 | -121.09 | . 20636 2.5568 | 18.0 | 6.114035 | 1.315789 | 356.0 | 3.122807 | 39.49 | -121.21 | . 20637 1.7000 | 17.0 | 5.205543 | 1.120092 | 1007.0 | 2.325635 | 39.43 | -121.22 | . 20638 1.8672 | 18.0 | 5.329513 | 1.171920 | 741.0 | 2.123209 | 39.43 | -121.32 | . 20639 2.3886 | 16.0 | 5.254717 | 1.162264 | 1387.0 | 2.616981 | 39.37 | -121.24 | . 20640 rows × 8 columns . To clarify what each variable represents, I print out the description of the data by executing &quot;print(housing.DESCR)&quot;. . print(housing.DESCR) . California housing dataset. The original database is available from StatLib http://lib.stat.cmu.edu/datasets/ The data contains 20,640 observations on 9 variables. This dataset contains the average house value as target variable and the following input variables (features): average income, housing average age, average rooms, average bedrooms, population, average occupation, latitude, and longitude in that order. References - Pace, R. Kelley and Ronald Barry, Sparse Spatial Autoregressions, Statistics and Probability Letters, 33 (1997) 291-297. . From the link we can learn what each feature means: . MedInc：The median income of the residents in the block | HouseAge：The median age of houses on the block | AveRooms：The average number of rooms in the block | AveBedrms：The average number of bedrooms in the block | Population：Block population | AveOccup: Average occupancy | Latitude：Latitude of the block | Longitude：Longitude of the block | . Then I want to combine the target variable with features and transform the data into the dataframe form. . price = housing.target price = pd.DataFrame(price) price.columns=[&#39;price&#39;] price.head() . price . 0 4.526 | . 1 3.585 | . 2 3.521 | . 3 3.413 | . 4 3.422 | . house_price=pd.concat([Housing,price],axis=1) house_price.head() . MedInc HouseAge AveRooms AveBedrms Population AveOccup Latitude Longitude price . 0 8.3252 | 41.0 | 6.984127 | 1.023810 | 322.0 | 2.555556 | 37.88 | -122.23 | 4.526 | . 1 8.3014 | 21.0 | 6.238137 | 0.971880 | 2401.0 | 2.109842 | 37.86 | -122.22 | 3.585 | . 2 7.2574 | 52.0 | 8.288136 | 1.073446 | 496.0 | 2.802260 | 37.85 | -122.24 | 3.521 | . 3 5.6431 | 52.0 | 5.817352 | 1.073059 | 558.0 | 2.547945 | 37.85 | -122.25 | 3.413 | . 4 3.8462 | 52.0 | 6.281853 | 1.081081 | 565.0 | 2.181467 | 37.85 | -122.25 | 3.422 | . After obtaining a new dataframe, I&#39;m going to preprocess the data to prepare for the following analysis. . 2. Analytical Process . To see the type of each vriable and whether there are missing values, I use data.info() and data.isnull().sum(). | . house_price.info() . &lt;class &#39;pandas.core.frame.DataFrame&#39;&gt; RangeIndex: 20640 entries, 0 to 20639 Data columns (total 9 columns): MedInc 20640 non-null float64 HouseAge 20640 non-null float64 AveRooms 20640 non-null float64 AveBedrms 20640 non-null float64 Population 20640 non-null float64 AveOccup 20640 non-null float64 Latitude 20640 non-null float64 Longitude 20640 non-null float64 price 20640 non-null float64 dtypes: float64(9) memory usage: 1.4 MB . house_price.isnull().sum() . MedInc 0 HouseAge 0 AveRooms 0 AveBedrms 0 Population 0 AveOccup 0 Latitude 0 Longitude 0 price 0 dtype: int64 . As can be seen from the results above, all the values are in a float type and there are no values missing, so I can continue the following analysis. . The next step is to make a statistical description of the data. | . house_price.describe() . MedInc HouseAge AveRooms AveBedrms Population AveOccup Latitude Longitude price . count 20640.000000 | 20640.000000 | 20640.000000 | 20640.000000 | 20640.000000 | 20640.000000 | 20640.000000 | 20640.000000 | 20640.000000 | . mean 3.870671 | 28.639486 | 5.429000 | 1.096675 | 1425.476744 | 3.070655 | 35.631861 | -119.569704 | 2.068558 | . std 1.899822 | 12.585558 | 2.474173 | 0.473911 | 1132.462122 | 10.386050 | 2.135952 | 2.003532 | 1.153956 | . min 0.499900 | 1.000000 | 0.846154 | 0.333333 | 3.000000 | 0.692308 | 32.540000 | -124.350000 | 0.149990 | . 25% 2.563400 | 18.000000 | 4.440716 | 1.006079 | 787.000000 | 2.429741 | 33.930000 | -121.800000 | 1.196000 | . 50% 3.534800 | 29.000000 | 5.229129 | 1.048780 | 1166.000000 | 2.818116 | 34.260000 | -118.490000 | 1.797000 | . 75% 4.743250 | 37.000000 | 6.052381 | 1.099526 | 1725.000000 | 3.282261 | 37.710000 | -118.010000 | 2.647250 | . max 15.000100 | 52.000000 | 141.909091 | 34.066667 | 35682.000000 | 1243.333333 | 41.950000 | -114.310000 | 5.000010 | . From the result of descriptive statistics, it is clear that the values of some data vary largely, for example, &#39;AveRooms&#39;. . Another problem is that due to the differences of dimensionality of the features, their units are not in the same order of magnitude, which may lead to difference in their contribution to the prediction, that is, some features may be ignored incorrectly. . In order to eliminate the influence of dimensionality, the features will be normalized before applying the model. . Then I&#39;ll see the distribution of the target variable &#39;price&#39;. | . sns.distplot(house_price[&#39;price&#39;]) plt.show() . D: Anaconda lib site-packages scipy stats stats.py:1713: FutureWarning: Using a non-tuple sequence for multidimensional indexing is deprecated; use `arr[tuple(seq)]` instead of `arr[seq]`. In the future this will be interpreted as an array index, `arr[np.array(seq)]`, which will result either in an error or a different result. return np.add.reduce(sorted[indexer] * weights, axis=axis) / sumval . When using regression methods, it is necessary to log-transform the target variables if they are skewed. However, the distribution of &#39;price&#39; shows a positive skewness. Since I&#39;m going to perform regression method in the following part, I need to apply logarithmic transformation to improve the linearity of the data. . The data after transformation and the Kurtosis and Skewness will be shown in the next graph. . from scipy.stats import norm y = house_price[&#39;price&#39;] y = np.log1p(y) sns.distplot(y, fit=norm) print(&#39;After_Kurtosis：&#39;,y.skew()) print(&#39;After_Skewness：&#39;,y.kurtosis()) plt.show() . After_Kurtosis： 0.2759390509171133 After_Skewness： -0.598354609101563 . D: Anaconda lib site-packages scipy stats stats.py:1713: FutureWarning: Using a non-tuple sequence for multidimensional indexing is deprecated; use `arr[tuple(seq)]` instead of `arr[seq]`. In the future this will be interpreted as an array index, `arr[np.array(seq)]`, which will result either in an error or a different result. return np.add.reduce(sorted[indexer] * weights, axis=axis) / sumval . Correlations | . Before applying regression method, it&#39;s necessary to find the relationship between the target variable and each feature, as well as the correlation between any two features. I’ll make scatter plots to see the relationship between any two variables. . fig = plt.figure(figsize=(15, 25)) sns.pairplot(data=house_price, vars=house_price.iloc[:,0:9]) plt.show() . &lt;Figure size 1080x1800 with 0 Axes&gt; . From the last row, we can see that there is no obvious linear relationship in any figure, so probably I should apply other regression methods except linear regression. Since the number of features is small,only 8, I&#39;m not going to delete any feature or create any new feature at first, though there are certain relationships between some features. . Split the Dataset and Test Each Model | . From project two I found that the linear regression method didn&#39;t perform well on the original dataset, and the reasons are shown in the steps above, so I will first regularize the features and take the logarithm of the target variable. . from sklearn import preprocessing cols = [&#39;MedInc&#39;,&#39;HouseAge&#39;,&#39;AveRooms&#39;,&#39;AveBedrms&#39;,&#39;Population&#39;,&#39;AveOccup&#39;,&#39;Latitude&#39;,&#39;Longitude&#39;] x = house_price[cols].values y = np.log(house_price[&#39;price&#39;]) x_norm = preprocessing.StandardScaler().fit_transform(x) . I&#39; m going to apply linear regression and random forest together to compare how they perform on the train dataset by using R^2 as a cirterion. . from sklearn.ensemble import RandomForestRegressor from sklearn.metrics import r2_score X_train, X_test, y_train, y_test = train_test_split(x_norm, y, test_size=0.2,random_state = 0) rf = RandomForestRegressor(n_estimators=50) ln = LinearRegression() rf.fit(X_train, y_train) ln.fit(X_train, y_train) print(&#39;RandomForest_R2: {}nLinearRegression_R2: {}&#39;.format(r2_score(y_test, rf.predict(X_test)), r2_score(y_test, ln.predict(X_test)))) . RandomForest_R2: 0.8230912551862245nLinearRegression_R2: 0.608687347536917 . This time I split the dataset by setting the test size = 0.2, which means that there are 4128 observations in the test set and 16512 observations in the train set. The score of the linear regression method is 0.6087, while the score of the random forest method is 0.8234, which shows that the random forest method is much better here than the linear regression method. This result also confirms the non-linear relationship between &#39;price&#39; and each feature in the above graph. . To test the stability of the advantage of random forest in this question, I change the test size= 0.3. The result is quite similar. . X_train1, X_test1, y_train1, y_test1 = train_test_split(x_norm, y, test_size=0.3,random_state = 0) rf.fit(X_train1, y_train1) ln.fit(X_train1, y_train1) print(&#39;RandomForest_R2: {}nLinearRegression_R2: {}&#39;.format(r2_score(y_test, rf.predict(X_test)), r2_score(y_test, ln.predict(X_test)))) . RandomForest_R2: 0.8181241589130941nLinearRegression_R2: 0.6090756700518807 . Make Predictions Using the Random Forest Method | . rf.fit(X_train, y_train) predict_y = rf.predict(X_test) predict_y = np.exp(predict_y) # change&#39;price&#39; into the original form. predict_price = pd.DataFrame(predict_y, columns=[&#39;price&#39;]) predict_price rf.score(X_test,y_test) . 0.8200749016044022 . rf.fit(X_train1, y_train1) predict_y1 = rf.predict(X_test1) predict_y1 = np.exp(predict_y1) ## change&#39;price&#39; into the original form. predict_price = pd.DataFrame(predict_y1, columns=[&#39;price&#39;]) predict_price rf.score(X_test1,y_test1) . 0.8197820776801721 . predictDf = pd.DataFrame(predict_y, columns=[&#39;price&#39;]) predictDf.to_csv(&#39;predict.csv&#39;, index = False) . I apply the two models which are obtained by different train sets, and use the one with higher R^2 to make predictions of the house price. Here is the result. . predictDf.head() . price . 0 1.390969 | . 1 2.480951 | . 2 1.465712 | . 3 0.767133 | . 4 3.719042 | . Model Improvement | . Since there are some features which seem not related to &#39;price&#39;, I&#39;m going to select those which can be used to better predict the house price by using the feature selection function in RandomForestClassifier. . from sklearn.ensemble import RandomForestClassifier rfc = RandomForestClassifier(n_estimators=50, random_state=0, n_jobs=-1) rfc.fit(X_train, y_train.astype(&#39;int&#39;)) . RandomForestClassifier(bootstrap=True, class_weight=None, criterion=&#39;gini&#39;, max_depth=None, max_features=&#39;auto&#39;, max_leaf_nodes=None, min_impurity_decrease=0.0, min_impurity_split=None, min_samples_leaf=1, min_samples_split=2, min_weight_fraction_leaf=0.0, n_estimators=50, n_jobs=-1, oob_score=False, random_state=0, verbose=0, warm_start=False) . importances = rfc.feature_importances_ indices = np.argsort(importances)[::-1] feat_labels =house_price.columns[:8] for f in range(X_train.shape[1]): print(&quot;%2d) %-*s %f&quot; % (f + 1, 30, feat_labels[indices[f]], importances[indices[f]])) . 1) MedInc 0.298420 2) Longitude 0.135452 3) AveOccup 0.135442 4) AveRooms 0.132912 5) Latitude 0.119875 6) HouseAge 0.063839 7) AveBedrms 0.058890 8) Population 0.055171 . According to the selection results of the above, &#39;MedInc&#39;,&#39;AveRooms&#39;,&#39;AveOccup&#39;,&#39;Latitude&#39;,&#39;Longitude&#39; are finally selected, and the &#39;HouseAge&#39;,&#39;AveBedrms&#39;,&#39;Population&#39;are deleted. . Then I&#39;ll use the new-selected features to train another random forest model. . cols1 = [&#39;MedInc&#39;,&#39;AveRooms&#39;,&#39;AveOccup&#39;,&#39;Latitude&#39;,&#39;Longitude&#39;] x = house_price[cols1].values y = np.log(house_price[&#39;price&#39;]) x_norm1 = preprocessing.StandardScaler().fit_transform(x) X_train2, X_test2, y_train2, y_test2 = train_test_split(x_norm1, y, test_size=0.2,random_state = 0) . rf.fit(X_train2, y_train2) predict_y2 = rf.predict(X_test2) predict_y2 = np.exp(predict_y2) # change&#39;price&#39; into the original form. predict_price = pd.DataFrame(predict_y2, columns=[&#39;price&#39;]) predict_price rf.score(X_test2,y_test2) . 0.8300889706615963 . The score of the model is slightly higher than the models above, which shows that the selection of features work here, though the improvement is not much. . I&#39;ll create a new dataset predict_new to collect the prediction results. . predict_new = pd.DataFrame(predict_y2, columns=[&#39;price&#39;]) predict_new.to_csv(&#39;predict_new.csv&#39;, index = False) . predict_new.head() . price . 0 1.381673 | . 1 2.603891 | . 2 1.476010 | . 3 0.702918 | . 4 4.868506 | . A Summary of Results . So far, I&#39;ve completed the whole analytical process and I&#39;ll give a summary to the results. . I mainly applied 2 supervised learning methods in my analysis. | . Because the dataset includes a target variable price, I chose the surpervised learning methods as the tool to train the model and make predictions. . Preprocessing | . I continued to use linear regression which I applied in project 2. To improve the results, I regularized feature variables to eliminate the effect of magnitude and extreme values, and I also applied logarithmic transformation to the variable to eliminate the effect of positive skewness. . Two methods | . Observing the nonlinear relationship between many features and &#39;price&#39;, I decided to use another machine learning method which is always performed under this situation. By comparing the R^2 value of each method,which are 0.6087 for linear regression and 0.8234 for random forest respectively,that the random forest method performs much better on this datasetter on this dataset.Then I applied this method to make predictions,the test score was 0.8201, which showed an excellent interpretability. . Model Improvement | . Another observation from the scatter plots was that there are strong correlations between some features, for example,&#39;AveRooms&#39;and &#39;AveBedrms&#39;. To delete the redundant variable and make better predictions, I used the feature importance function in RandomForestClassifier to print the importance value of each feature, and delete the 3 features &#39;House Age&#39;,&#39;AveBedrms&#39;,&#39;Population&#39; with values much less than the other values. Then, using the new-selected features, the score of the model improved by a little, which confirmed a positive change in model interprebility.One reason that the change is small is probably because the score of the former model had been already high enough. Another improvement may be that we can try using more intelligent methods to delete features automatically to improve the most. . Discussion . My analysis showed the relationship between certain features and house price and also proved that some of them can be used to predict the price of houses. Also, through the preprocess of the dataset, we can find many potential signals which lead us to more appropriate models and better predictions. . | I found that house price predictions have long been seemed as a popular data analysis focus and there are numerous such datasets in Kaggle.The most important reason is probably that housing is closely related to people&#39;s life and almost every family pay a lot of attention on purchasing or investing in houses. If one acquires data analysis skills, them maybe he or she can use models to provide instructions of his or her behaviors. I suppose another use of applying EDA on this topic is to help governments to predict future trends of the housing market based on the historical data and make regulations or policies which can improve the market efficiency and even the economic development. . | Further Exploration I also found two points where more work can be done. The first one is that I used two data-split methods, of 0.2 and 0.3 respectively, but I didn&#39;t try other split methods which may lead to different results. Another one was that I subjectively deleted 3 variables at the bottom, but I couldn&#39;t be sure that this was the way to create the best model. Maybe other methods can be applied to delete features automatically and improve the model more. . | . It is really fun to conduct such a analysis and I&#39;ll continue to explore in the data science field. .",
            "url": "https://01zbb.github.io/Blog/2022/09/02/Blog.html",
            "relUrl": "/2022/09/02/Blog.html",
            "date": " • Sep 2, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://01zbb.github.io/Blog/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://01zbb.github.io/Blog/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://01zbb.github.io/Blog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://01zbb.github.io/Blog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}